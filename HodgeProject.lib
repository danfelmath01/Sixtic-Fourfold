LIB "general.lib"; LIB "solve.lib"; LIB "algebra.lib";  LIB "foliation.lib"; LIB "matrix.lib"; 
LIB "ellipticcovers.lib"; //It is used for permutation: permutate
LIB "qhmoduli.lib"; // It is used for compute the min of array: Min
//---------------------------------------------------------------------------
//---------------------------GENERAL PROCEDURES------------------------------
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
proc PolyAlgCycle (poly F, ideal f, int n)
"USAGE:
    PolyAlgCycle(polynomial_expression,ideal_expression, int_expression)
PURPOSE: 
    This procedure computes the general polynomial associated to a 
    algebraiccycle. The ideal f=<f1, f2,..., fn+1> defines a 
    complete intersection in the projective hypersurface given by F, 
    (e.g. [1]) 
RETURN:
     The associated polynomial to the complete intersection given by f, 
     in the smooth hypersurface {F=0}. And the polynomials gi, such that
                           Sum fi*gi=F.
SEE ALSO:

EXAMPLE: 
     example PolyAlgCycle; shows an example
"
{
int i; int j;
if (dim(std(jacob(F)))>0) {print("The hypersurface is not smooth")};
if (dim(std(jacob(F)))==0) //F=0 is smooth
{
ideal B=std(f);
if (NF(F,B)!=0){print("F does not belong to I")}
if (NF(F,B)==0) //F is in the ideal generated by algebraic cycles
{
ideal G=lift(f,F); // Coeff such that: Sum(G[i]*f[i])=F
matrix M[2*n+2][2*n+2];
j=1;
for (i=1;i<=2*n+1;i=i+2)
{
     M[1..2*n+2,i]=jacob(f[j]);
     j=j+1;
}
j=1;
for (i=2;i<=2*n+2;i=i+2)
{
     M[1..2*n+2,i]=jacob(G[j]);
     j=j+1;
}
poly P=det(M);
}
}
list Out;
Out[1]=P;
Out[2]=G;
return(Out);
}
example
{"EXAMPLE:"; echo=2;     
    int d=3;
    int n=2;
    int i;

    ring R=(0,l),(x(0..2*n+1)),dp;
    poly cp=cyclotomic(2*d); cp=subst(cp,x(0),l);
    minpoly=number(cp); //Polinomio ciclotomico

    poly F;
    for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}
    print(F);
    ideal f;
    for (i=1;i<=n+1;i=i+1) {f=f, x(2*i-2)-l*x(2*i-1);}
    f=f+0;
    print(f);
    list P=PolyAlgCycle(F,f,n);
    print(P);
}
//---------------------------------------------------------------------------
proc CupC (poly F, poly P, poly Q, int n)
"USAGE:
     CupC (poly_express, poly_express, poly_express, int_express, int_express)
PURPOSE: 
     Compute the unique number c such that P.Q=c Hess(F) mod (JF). 
     n is the dimension of the hypersurface given by F.
RETURN:
     The number c, in the Prop 5 of [1].
SEE ALSO:

EXAMPLE: 
     example CupC; shows an example
"
{
number c=number(NF(P*Q,std(jacob(F)))/NF(det(jacob(jacob(F))),std(jacob(F))));
//leadcoef(NF(P1*P2,std(jacob(F))))/leadcoef(NF(det(jacob(jacob(F))),std(jacob(F))));

return(c);
}
example
{"EXAMPLE:"; echo=2;     
    int n=2;
    int i;

    ring R=(0,l),(x(0..2*n+1)),dp;
    poly cp=cyclotomic(2*d); cp=subst(cp,x(0),l);
    minpoly=number(cp); //Polinomio ciclotomico

    poly F;
    for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}
    print(F);
    
    ideal f1;
    for (i=1;i<=n+1;i=i+1) {f1=f1, x(2*i-2)-l*x(2*i-1);}
    f1=std(f1);
    print(f1);

    ideal f2;
    for (i=1;i<=n+1;i=i+1) {f2=f2, x(2*i-2)-l^11*x(2*i-1);}
    f2=std(f2);
    print(f2);

    list O1=PolyAlgCycle(F,f1,n);
    poly P1=O1[1];
    list O2=PolyAlgCycle(F,f2,n);
    poly P2=O2[1];
    
    number c=CupC(F,P1,P2,n);
    print(c);

    //Test
    poly PR=P1*P2-c*det(jacob(jacob(F)));
    NF(PR,std(jacob(F)));
}
//---------------------------------------------------------------------------
proc Periods (poly F, poly P, poly Q, int n)
"USAGE:
     Periods (poly_express, poly_express, poly_express, int_express, int_express)
PURPOSE: 
     Compute the periods given by Proposition 5 in [1]. 
     n is the dimension of the hypersurface given by F.
RETURN:
     Period number  given by Proposition 5 in [1]. 
SEE ALSO:
    CupC, Intersection   
EXAMPLE: 
     example Periods; shows an example
"
{
number c=CupC(F,P,Q,n);
int d=deg(F);
number Period=-c*(d-1)^(2*n+2)*d/(factorial(n));
return(Period);
}
example
{"EXAMPLE:"; echo=2;     
    
}
//---------------------------------------------------------------------------
proc Intersection (poly F, poly Pd, poly Pm, int n,  int d1, int d2)
"USAGE:
     Intersection (poly_express, ideal_express, ideal_express, int_express, int_express)
PURPOSE: 
     This procedure computes the intersection number of two algebraic cycles with associated
     polynomials Pd and Pm in the hypersurface X:={F=0}. 
     The number n is the dimension of X.
     dm is the degree  associated to M, and dd is the degree associated to D.
RETURN:
     Intersection number given by Corollary 2 in [1].
SEE ALSO:
     CupC, Periods   
EXAMPLE: 
     example Intersection; shows an example
"
{
number c=CupC(F,Pd,Pm,n);
int d=deg(F);
number I=number(d1)*number(d2)/d-(c*(d-1)^(2*n+2))/d;
return(I)
}
example
{"EXAMPLE:"; echo=2;

}
//---------------------------------------------------------------------------
proc KtoVec (int K, int n, int d)
"USAGE:
     KtoVec(int_express,int_express,int_express)
PURPOSE: 
     This is used to pass a number K to a vector with n digits from 0 to d-1.
RETURN:
     The intvec (vector) associated to K=an*d^(n-1)+...+a2*d+a1
SEE ALSO:

EXAMPLE: 
     example KtoVec; shows an example
"
{
int i;
intvec a;
int iaux=K;
for(i=0; i<=n; i=i+1)
{
     a[n-i+1]=iaux div (d^(n-i));
     iaux=iaux-a[n-i+1]*(d^(n-i));
}
return(a);

}
example
{"EXAMPLE:"; echo=2;     
    ring R=0,x,dp;
    int K=1000;
    int n=5; int d=7;
    KtoVec(K,n,d);
}
//---------------------------------------------------------------------------
proc KtoVec2 (int K, int n, int d)
"USAGE:
     KtoVec2(int_express,int_express,int_express)
PURPOSE: 
     This is used to pass a number K to a vector with n digits from 1 to d.
RETURN:
     The intvec (vector) associated to K=an*d^(n-1)+...+a2*d+a1
SEE ALSO:

EXAMPLE: 
     example KtoVec2; shows an example
"
{
int i;
intvec a;
int iaux=K;
for(i=0; i<=n; i=i+1)
{
     a[n-i+1]=(iaux div (d^(n-i)))+1;
     iaux=iaux-(a[n-i+1]-1)*(d^(n-i));
}
return(a);

}
example
{"EXAMPLE:"; echo=2;     
    ring R=0,x,dp;
    int K=1000;
    int n=5; int d=7;
    KtoVec2(K,n,d);
}
//---------------------------------------------------------------------------
proc PermLinear (int n)
"USAGE:
     PermLinear(int_express)
PURPOSE: 
     This is used to compute the permutations of {0,..,2n+1} used in the description
     of linear cycles in [2].
RETURN:
     A list with the permutation.
SEE ALSO:

EXAMPLE: 
     example PermLinear; shows an example
"
{
int i; int j; int k=1;
int N=2*n+1;
list L;
for(i=0; i<=N; i=i+1)
{
     L[N-i+1]=i;
}
list b=permute(L);
list Out; 
int Pr; list aux; // auxilary variables
int Nb=size(b);
for (i=1;i<=Nb; i=i+1)
{    
     aux =b[i];
     Pr=0;
     for (j=1; j<=N+1;j=j+2)
     {
               
          if (b[i][j]==Min(list(aux[j..N+1]))){Pr=Pr+1;}
     }
     if (Pr==((N+1) div 2)){Out[k]=b[i]; k=k+1;} 
}
return(Out);

}
example
{"EXAMPLE:"; echo=2;     
    ring R=0,x,dp;
    int n=1; 
    PermLinear(n);
}
//---------------------------------------------------------------------------
proc PermAS (int n)
"USAGE:
     PermAS(int_express)
PURPOSE: 
     This is used to compute the permutations of {0,..,2n+1} used in the description
     of Aoki-Shioda cycles in [3].
RETURN:
     A list with the permutation.
SEE ALSO:

EXAMPLE: 
     example PermAS; shows an example
"
{
int i; int j; int k=1;
int N=2*n+1;
list L;
for(i=0; i<=N; i=i+1)
{
     L[N-i+1]=i;
}
list b=permute(L);
list Out; 
int Pr; list aux; // auxilary variables
int Nb=size(b);
for (i=1;i<=Nb; i=i+1)
{    
     aux =b[i];
     //if (b[i][2]<b[i][3] and b[i][5]<b[i][6]){Out[k]=b[i]; k=k+1;} 
     if (b[i][2]<b[i][3]){Out[k]=b[i]; k=k+1;} 
}
return(Out);

}
example
{"EXAMPLE:"; echo=2;     
    ring R=0,x,dp;
    int n=2; 
    PermAS(n);
}
//---------------------------------------------------------------------------
proc PermT3 (int n)
"USAGE:
     PermT3(int_express)
PURPOSE: 
     This is used to compute the permutations of {0,..,2n+1} used in the description
     of T3 cycles in [3].
RETURN:
     A list with the permutation.
SEE ALSO:

EXAMPLE: 
     example PermT3; shows an example
"
{
int i; int j; int k=1;
int N=2*n+1;
list L;
for(i=0; i<=N; i=i+1)
{
     L[N-i+1]=i;
}
list b=permute(L);
list Out; 
int Pr; list aux; // auxilary variables
int Nb=size(b);
for (i=1;i<=Nb; i=i+1)
{    
     aux =b[i];
     if (b[i][2]<b[i][3] and b[i][5]<b[i][6]){Out[k]=b[i]; k=k+1;} 
}
return(Out);

}
example
{"EXAMPLE:"; echo=2;     
    ring R=0,x,dp;
    int n=2; 
    PermAS(n);
}
//---------------------------------------------------------------------------
proc LinAlgCycles (int n, int d)
"USAGE:
     LinAlgCycles (int_expression,int_expression)
PURPOSE: 
     Compute the polynomials associated to the basis for the Linear cycles 
     in Fermat variety.
RETURN:
     The ring where the polynomials are defined.
     The matrix M: The row i is associated with the a corresponding to KtoVec(i,n,d)
                   The column j is associated with  the j-th permutation in PermLinear(n)
                   In the position (i,j) of M, there is the polinomial associated to the this (a,b)
     The list CL are the same elements that in M, but in list. For a fixed row with put togheter the columns.
SEE ALSO:
     KtoVec, PermLinear.  
EXAMPLE: 
     example LinAlgCycles; shows an example
"
{
//0) Fristly, we define a ring with the 2-d roots of unity as parameter
int i; int j; int k;
ring R=(0,l),(x(0..2*n+1)),dp;
poly cp=cyclotomic(2*d); cp=subst(cp,x(0),l);
minpoly=number(cp); //Polinomio ciclotomico
poly F; //Fermat variety
for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

int N=2*n+1;

//1) Define all posible tuples a=(a1,...,a2n+1)
int Na=d^(n+1);

// 2) Define the permutation
list b=PermLinear(n);
int Nb=size(b);

// 3) Matrix with of polynomials associated 
// In the rows we change the a
// In the columns we change the b
ideal f;
int kb; int kbs;
intvec a;
matrix M[Na][Nb];
list P;
for (i=0;i<=Na-1;i=i+1)
{
     a=KtoVec (i,n+1,d);  
     for (j=1;j<=Nb;j=j+1)
     {
          f=0;
          for (k=1;k<=n+1;k=k+1) 
          {
               kb=int(b[j][2*k-1]); kbs=int(b[j][2*k]);
               f=f, x(kb)-l^(1+2*a[k])*x(kbs);
          }
          //f=std(f);
          f=f+0;
          P=PolyAlgCycle(F,f,n);
          M[i+1,j]=P[1];
     }
}
// The matrix as a list:
ideal CL;
k=1;
for (i=1; i<=Na; i=i+1)
{
     for (j=1; j<=Nb; j=j+1){CL[k]=M[i,j]; k=k+1;}
}
CL=CL+0;
export(CL);
export(M);
return(R);

}
example
{"EXAMPLE:"; echo=2;     
     ring R=LinAlgCycles (1, 3);
     print(CL);
}
//---------------------------------------------------------------------------
proc BasisChFermat (int n, int d)
"USAGE:
     BasisChFermat (int_expression, int_expression)
PURPOSE: 
     Compute a  basis B, for the cohomology of the Fermat variety of dimension n
     and degree d. 
RETURN:
     The ring where the polynomials are defined.
     List B of a basis.
SEE ALSO:
     LinAlgCycles   
EXAMPLE: 
     example BasisChFermat; shows an example
"
{
int P=(n+1)*(d-2);
ring R=0,(x(0..2*n+1)),dp;
int N=2*n+1;
int Na=d^(N+1)-1;
int i; intvec j; int k; int h=1; intvec ind;
intvec a;
ideal B;
for (i=0;i<=Na-1;i=i+1)
{
     a=KtoVec (i,N,d); 
     if (sum(a)==P)
     {
     ind =0;
     for (j=1; j<=N+1;j=j+1)
     {
          if(a[j]<=d-2){ind=ind+1;}    // All coeff have to be less than d-2
     }
     if (ind==N+1)
          {
          B[h]=1;
          for (k=1;k<=N+1;k=k+1)
          {
               B[h]=B[h]*x(k-1)^a[k];
          } 
          h=h+1;
          }
     }     
}
export(B);
return(R);
}
example
{"EXAMPLE:"; echo=2;     
    
}
//---------------------------------------------------------------------------
proc IntersecMatrix (poly F, ideal f, ideal g, int n, intvec df, intvec dg)
"USAGE:
     IntersecMatrix (poly_express, ideal_express, ideal_express, int_express, intvec_express,intvec_express)
PURPOSE: 
     Compute the intersection matrix of the polynomial of the ideal f and the polynomials
     of the ideal g in the hypersurface X={F=0}.
RETURN:
     Intersection matrix.
SEE ALSO:
     CupC, Periods, Period   
EXAMPLE: 
     example IntersecMatrix; shows an example
"
{
int Nr=size(f); // Number of elements in the basis B
int Nc=size(g); // Number of polynomials in the family f
if (Nr*Nc==0){matrix IM;}// Avoid the empty matrix.}
else
{
matrix IM[Nr][Nc];
int i; int j;
for (i=1;i<=Nr;i=i+1)
{    print("i=");print(i);
     for (j=1;j<=Nc;j=j+1)
     {//print("j=");print(j);
          IM[i,j]=Intersection (F, f[i], g[j], n,  df[i], dg[j]);
     }     
}
}
return(IM);
}
example
{"EXAMPLE:"; echo=2;
     int n=1;
     int d=4;
     ring R=LinAlgCycles (n, d);
     ideal f=CL; // Associated polynomials to the linear cycles.
     intvec df;
     int i;
     for (i=1;i<=size(f); i=i+1){df[i]=1;} // degrees of linear cycles.
     poly F; //Fermat variety
     for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

     matrix IM=IntersecMatrix (F, f, f, n, df,df);
     rank(IM);       
}
//---------------------------------------------------------------------------
proc IntersecMatrixFaster (matrix IM0, poly F, ideal f, poly fn, ideal g, poly gn, int n, intvec df, intvec dg)
"USAGE:
     IntersecMatrixFaster (matrix_express, poly_express, ideal_express, poly_express, ideal_express, poly_express, int_express, intvec_express)
PURPOSE: 
     Compute the intersection matrix of the polynomial of the ideal f and the polynomials
     of the ideal g in the hypersurface X={F=0}. 
     It is used in computation of iterative intersection matrix, where IM0 is a previous intersection matrix associated 
     to the ideals f,g. The polynomials fn, gn are the last new elements to add to the previous ideal
RETURN:
     Intersection matrix IM=(IM0 fn^g: IM0 f^gn).
SEE ALSO:
     IntersecMatrix 
EXAMPLE: 
     example IntersecMatrixFaster; shows an example
"
{
int Nr=1+nrows(IM0); // Number of elements in the basis B
int Nc=1+ncols(IM0); // Number of polynomials in the family f
if (nrows(IM0)*ncols(IM0)==0){matrix IM=Intersection (F, fn, gn, n,  df[1], dg[1]);}// Avoid the empty matrix.
else
{
matrix IM[Nr][Nc];
IM[1..nrows(IM0),1..ncols(IM0)]=IM0;
int i; 
f=f,fn; g=g,gn;
for (i=1;i<=Nr;i=i+1)
{
    IM[i,Nc]=Intersection (F, f[i], gn, n,  df[i], dg[Nc]);     
}
for (i=1;i<=Nr;i=i+1)
{
    IM[Nr,i]=Intersection (F, fn, g[i], n,  df[Nr], dg[i]);     
}
}
return(IM);
}
example
{"EXAMPLE:"; echo=2;
     int n=1;
     int d=3;
     ring R=LinAlgCycles (n, d);
     ideal f=CL; // Associated polynomials to the linear cycles.
     intvec df;
     int i;
     for (i=1;i<=size(f); i=i+1){df[i]=1;} // degrees of linear cycles.
     poly F; //Fermat variety
     for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

     matrix IMi=IntersecMatrix (F, f, f, n, df,df); //  27x27 Matrix
     matrix IM0[26][26]=IMi[1..26, 1..26];
     poly fn=CL[27];
     matrix IMf=IntersecMatrixFaster(IM0,F, ideal(f[1..26]), fn, ideal(f[1..26]), fn, n, df,df);
     
     // The matrix IM is equal to IMf
     print(IMi-IMf);            
}
//---------------------------------------------------------------------------

proc PeriodMatrix (poly F, ideal f, ideal B, int n)
"USAGE:
     PeriodMatrix (poly_express, ideal_express, ideal_express, int_express)
PURPOSE: 
     Compute the periods matrix of the familiy of polynomials f in the basis B, in the 
     hypersurface X={F=0}.
RETURN:
     Matrix of Periods.
SEE ALSO:
     CupC, Periods   
EXAMPLE: 
     example PeriodMatrix; shows an example
"
{
int Nr=size(B); // Number of elements in the basis B
int Nc=size(f); // Number of polynomials in the family f
matrix MP[Nr][Nc];
int i; int j;
for (i=1;i<=Nr;i=i+1)
{
     for (j=1;j<=Nc;j=j+1)
     {
          MP[i,j]=Periods (F, B[i], f[j], n);
     }     
}

return(MP);
}
example
{"EXAMPLE:"; echo=2; 
     int n=2;
     int d=3;
     int i;
     ring R0=BasisChFermat(n,d);
     ring R=LinAlgCycles (n, d);
     poly F; //Fermat variety
     for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}
     ideal B=imap(R0,B); //Basis for the cohomology
     ideal f=CL;         // Linear cycles

     matrix Per=PeriodMatrix (F, f, B, n);// Period matrix
     rank(Per);  
}
//---------------------------------------------------------------------------
proc HodgeChar(int n, int d)
"USAGE:
     HodeChar (int_expression, int_expression)
PURPOSE: 
     Computes the Hodge carcateres for 2*n+2, and degree d. See [3]
RETURN:
     A list L, such that:
     L[1] is the list of  Hodge characteres.
     L[2] is the list of characteres a, where dim(V(a))=1.
SEE ALSO:
     HodgeMon   
EXAMPLE: 
     example HodgeChar; shows an example
"
{
int i; int j; int t; int t0;
list L;
intvec CompAll; 
int l=1; int k=1;
int N=(d-1)^(2*n+2);
list U;
list B;
intvec V; intvec Beta;
for (i=0; i<=N-1; i=i+1)
{
     V=KtoVec2(i,2*n+1,d-1);
     if (sum(V)%d==0)
     {
          U[l]=V; l=l+1;
          t0=1;
          for (t=1;t<=d-1; t=t+1)
          {   
             if (gcd(d,t)==1)
               {
               for (j=1; j<=2*n+2;j=j+1)
               {
                    Beta[j]=(t*V[j])%d;
               }
               CompAll[t0]=(sum(Beta)==d*(n+1)); // Comprobation for any t
               t0=t0+1;
               }
          }

          if (product(CompAll)==1){B[k]=V; k=k+1;}
     }
}
L[1]=B;
L[2]=U;
return(L);
}
example
{"EXAMPLE:"; echo=2; 
     int n=1;
     int d=3;
     ring r=0,(x(0..2*n+1)),dp;
     list L=HodgeChar(n,d);
     //The list of Hodge Characters
     L[1]; 
     // The list of characters a, with dim(V(a))=1
     L[2]; 
}
//---------------------------------------------------------------------------
proc HodgeMon(int n, int d)
"USAGE:
     HodgeMon (int_expression, int_expression)
PURPOSE: 
     Computes all monomials associated to all Hodge characters 2*n+2, and degree d. See [3]
     That  is x^B, where b_i=a_i-1, and a=(a_0,..., a_(2n+2)) is Hodge character
RETURN:
     The ideal IH generated by all Hodge monomials of dimension 2n+1 and degree d.
SEE ALSO:
     HodgeChar   
EXAMPLE: 
     example HodgeMon; shows an example
"
{
int i; int j;
list LCh=(HodgeChar(n,d))[1];
int N=size(LCh);
int n0=2*n+1;
ideal L;
ideal IH;
for (i=1; i<=N;i=i+1)
{
     L[i]=1;
     for(j=1;j<=n0+1;j=j+1)
     {
          L[i]=L[i]*var(j)^((LCh[i][j])-1);
     }
     IH=IH,L[i];
}
IH=IH+0; // This avoid IH[1]=0 
return(IH);
}
example
{"EXAMPLE:"; echo=2; 
     int n=2;
     int d=3;
     ring r=0,(x(0..2*n+1)),dp;
     ideal IH=HodgeMon(n,d);
     //The list of Hodge monomials
     IH;
}
//---------------------------------------------------------------------------
proc HCFermat (int n, int d, ideal Alg)
"USAGE:
     HCFermat (int_expression, int_expression, ideal_expression)
PURPOSE: 
     The procedure verifies if ideal HodgeMon(n,d) is contained in Alg or not.
RETURN:
     Integer D:
     D=1 iff HodgeMon(n,d) is contaiend in  Alg.
     D=0 other case.
SEE ALSO:
     HodgeChar, HodgeMon, LinAlgCycles   
EXAMPLE: 
     example HCFermat; shows an example
"
{
ideal IH=HodgeMon(n,d);
IH=std(IH); // Standard basis
int D=(size(reduce(IH,Alg,1))==0);
return(D);
}
example
{"EXAMPLE:"; echo=2; 
     int n=1;
     int d=5;
     ring R=LinAlgCycles (n, d);
     ideal Alg=std(CL); // The linear cycles CL in standard basis
     int D=HCFermat(n,d,Alg);
     print(D);

     int n=1;
     int d=6;
     ring R=LinAlgCycles (n, d);
     ideal Alg=std(CL); // The linear cycles CL in standard basis
     int D=HCFermat(n,d,Alg);
     print(D);
}
//---------------------------------------------------------------------------
proc MonomialsDegree_d (int n, int d, int K)
"USAGE:
     MonomialsDegree_d (int_expression, int_expression, int_expression)
PURPOSE: 
     The procedure verifies give a list of all ideal of monomials in varaiables
     x(0),.., x(n) of degree d. With exponents less or equal than K
RETURN:
     List L of monomials
SEE ALSO:
     
EXAMPLE: 
     example MonomialsDegree_d; shows an example
"
{
int i; int j; int k=1; int prod=1;
intvec V;
int N=(d+1)^(n+1);
list L;
for (i=1;i<=N-1;i=i+1)
{
     V=KtoVec (i, n, d+1); 
     if (sum(V)==6)
     {
          prod=1;
          for (j=1; j<=size(V); j=j+1)
          {
               prod=prod*(V[j]<=K);
          }
          if (prod==1){L[k]=V; k=k+1;}
     }
}
return(L);
}
example
{"EXAMPLE:"; echo=2; 
     
}
//---------------------------------------------------------------------------


//:::::::::::::::::: Sextic quarricfold project :::::::::::::::::::::::::::::::::: 
//---------------------------------------------------------------------------
proc LinAlgCycles64()
"USAGE:
     LinAlgCycles64()
PURPOSE: 
     Compute the polynomials associated to the basis for the Linear cycles 
     in Fermat variety  {x_0^6+x_1^6+...+x_(2n+1)^6=0}
RETURN:
     The ring where the polynomials are defined.
     The ideal Icl of linear cycles. 
SEE ALSO:
     KtoVec, PermLinear, LinAlgCycles  
EXAMPLE: 
     example ASAlgCycles; shows an example
"
{
int n=2; int d=6;
//0) Fristly, we define a ring with the z:=x+y as parameter, where
// x=2^(1/3), y= e^(2ipi/12)

int i; int j; int k;
ring R3=(0,z),(x(0..2*n+1)),dp;
minpoly=z^12-3*z^10-8*z^9+6*z^8+17*z^6+84*z^5+42*z^4-76*z^3+129*z^2-60*z+25;
poly x=-53456/17655*z+1645/642*z^2-19964/3531*z^3-21399/2354*z^4-63812/17655*z^5-5677/7062*z^6-2342/17655*z^7+8463/11770*z^8+7966/17655*z^9+7/330*z^10-1526/17655*z^11-273/11770*z^12;
poly ys3=518/165*z+8827/1650*z^2-2344/825*z^3+5616/275*z^4+1196/75*z^5+5521/1650*z^6+122/165*z^7-12/25*z^8-1457/825*z^9-709/1650*z^10+26/165*z^11+43/275*z^12;
poly yi=28932/5885*z-616413/58850*z^2+416336/29425*z^3-65937/29425*z^4-256524/29425*z^5-102299/58850*z^6-558/1177*z^7-28191/29425*z^8+25413/29425*z^9+213/550*z^10+18/1177*z^11-3236/29425*z^12; // This is equal to srqt(-1)

poly y=1/2*ys3+1/2*yi;
poly y2=1/2+ys3*yi/2; // Powers of; in order to do faster the alforithm
poly y4=-1/2+ys3*yi/2;
poly y6=-1;
poly y8=-1/2-1/2*ys3*yi;
poly y10=1/2-1/2*ys3*yi;


poly F; //Fermat variety
for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

int N=2*n+1;


//1) Define all posible tuples a=(a1,...,a2n+1)
int Na=d^(n+1);

// 2) Define the permutation
list b=PermLinear(n);
int Nb=size(b);

// 3) Matrix with of polynomials associated 
// In the rows we change the a
// In the columns we change the b
ideal f;
int kb; int kbs;
intvec a;
matrix M[Na][Nb];
list P;
ideal Icl;
for (i=0;i<=Na-1;i=i+1)
{
     print("i="); print(i);
     a=KtoVec (i,n+1,d);  
     for (j=1;j<=Nb;j=j+1)
     {
          f=0;
          for (k=1;k<=n+1;k=k+1) 
          {
               kb=int(b[j][2*k-1]); kbs=int(b[j][2*k]);
               f=f, x(kb)-y*y2^(a[k])*x(kbs);
          }
          f=f+0;
          P=PolyAlgCycle(F,f,n);
          Icl=Icl,P[1];
     }
}

intvec Ind;
//Ind=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,361,364,367,369,372,374,382,387,389,397,402,404,412,417,419,427,432,434,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,901,904,907,909,912,914,922,927,929,937,942,944,952,957,959,967,972,974,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1330,1331,1332,1333,1334,1335,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1400,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1415,1417,1418,1419,1420,1421,1422,1423,1424,1425,1441,1444,1447,1449,1452,1454,1462,1477,1492,1507,1621,1622,1623,1624,1625,1626,1627,1629,1630,1631,1634,1637,1638,1640,1641,1642,1645,1646,1649,1652,1653,1655,1656,1657,1660,1661,1664,1667,1668,1670,1672,1675,1676,1682,1683,1685,1687,1690,1691,1711,1712,1713,1715,1716,1717,1720,1721,1727,1728,1730,1731,1732,1742,1743,1745,1746,1747,1757,1772,1801,1802,1807,1892;
Ind=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,361,364,367,369,372,374,382,387,389,397,402,404,412,417,419,427,432,434,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,901,904,907,909,912,914,922,927,929,937,942,944,952,957,959,967,972,974,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1330,1331,1332,1333,1334,1335,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1400,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1415,1417,1418,1419,1420,1421,1422,1423,1424,1425,1441,1444,1447,1449,1452,1454,1462,1477,1492,1507,1621,1622,1623,1624,1625,1626,1627,1629,1630,1631,1634,1637,1638,1640,1641,1642,1645,1646,1649,1652,1653,1655,1656,1657,1660,1661,1664,1667,1668,1670,1672,1675,1676,1682,1683,1685,1687,1690,1691,1711,1712,1713,1715,1716,1717,1720,1721,1727,1728,1730,1731,1732,1742,1743,1745,1746,1747,1757,1772,1801,1802,1807,1892,1893;

ideal lc; // The ideal of the linear independent linear cycles
for (i=1; i<=size(Ind); i=i+1)
{
     lc[i]=Icl[Ind[i]+1]; // this +1 is because Icl[1]=0;
}


intvec df;
for (i=1;i<=size(lc);i=i+1){df[i]=0;};
size(lc);
matrix IM1[size(lc)][size(lc)]=IntersecMatrix (F,lc, lc, n, df,df);
write(":w /home/daniel/Dropbox/QuarticSixtic/IdealsBasis/Ilc",IM1);

}
//---------------------------------------------------------------------------
proc ASAlgCycles ()
"USAGE:
     ASAlgCycles ()
PURPOSE: 
     Compute the polynomials associated to all Aoki-Shioda cycles in the Fermat variety (d=6, n=2)
     {x_0^6+x_1^6+...+x_(2n+1)^6=0}
RETURN:
     The ring where the polynomials are defined R=(0,z),(x(0..2*n+1)),dp;
     The ideal AS of Aoki-Shioda cycles
SEE ALSO:
     KtoVec, PermLinear, LinAlgCycles  
EXAMPLE: 
     example ASAlgCycles; shows an example
"
{
int n=2; int d=6;
//0) Fristly, we define a ring with the z:=x+y as parameter, where
// x=2^(1/3), y= e^(2ipi/12)

int i; int j; int k;
ring R=(0,z),(x(0..2*n+1)),dp;
minpoly=z^12-3*z^10-8*z^9+6*z^8+17*z^6+84*z^5+42*z^4-76*z^3+129*z^2-60*z+25;
poly x=-53456/17655*z+1645/642*z^2-19964/3531*z^3-21399/2354*z^4-63812/17655*z^5-5677/7062*z^6-2342/17655*z^7+8463/11770*z^8+7966/17655*z^9+7/330*z^10-1526/17655*z^11-273/11770*z^12;
poly ys3=518/165*z+8827/1650*z^2-2344/825*z^3+5616/275*z^4+1196/75*z^5+5521/1650*z^6+122/165*z^7-12/25*z^8-1457/825*z^9-709/1650*z^10+26/165*z^11+43/275*z^12;
poly yi=28932/5885*z-616413/58850*z^2+416336/29425*z^3-65937/29425*z^4-256524/29425*z^5-102299/58850*z^6-558/1177*z^7-28191/29425*z^8+25413/29425*z^9+213/550*z^10+18/1177*z^11-3236/29425*z^12; // This is equal to srqt(-1)

poly y=1/2*ys3+1/2*yi;
poly y2=1/2+ys3*yi/2; // Powers of y; in order to do faster the alforithm
poly y4=-1/2+ys3*yi/2;
poly y6=-1;
poly y8=-1/2-1/2*ys3*yi;
poly y10=1/2-1/2*ys3*yi;

//ring R0=0,(x(0..2*n+1),x,y),(ls(6),lp(2));
//ring R0=0,(x(0..2*n+1),x,y),(lp);
//ideal Q=x^3-2, y^4-y^2+1;
//qring R=std(Q);
//poly yi=y^3;

poly F; //Fermat variety
for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

int N=2*n-1;

//1) Define all posible tuples a=(a1,...,a2n+1)
int Na=d^(N+1);

// 2) Define the permutation
list b=PermAS(n);
int Nb=size(b);

// 3) Matrix with of polynomials associated 
// In the rows we change the a
// In the columns we change the b
ideal f;
intvec a; intvec a0;
//matrix MAS[Na][Nb];
matrix IM1[0][0]; matrix IM2[0][0]; //intvec df=6;
ideal AS0; ideal ASaux;
list P; 
poly f1; poly f2; poly f3;
poly g1; poly g2; poly g3;
poly c1; poly c2; poly c3; poly c4; poly c5; poly c6; poly c7;
k=1;
intvec Ind=0,1,2,6,7,8,216,217,218,222,223,224,432,433,434,438,439,440;
for (i=1;i<=size(Ind);i=i+1)
{    
     print("i=");print(Ind[i]);
     a0=KtoVec (Ind[i],N,d); 
     a=a0[1],0,a0[2],a0[3],0,a0[4];
     c1=(y4)^(a[1]); c2=-x*(y2)^(a[2])*(y2)^(a[3]);
     c3=(y6)^(a[2]); c4=(y6)^(a[3]); c5=yi*(y6)^(a[4]);
     c6=(y2)^(a[5]); c7=-y*(y2)^(a[6]);
     for (j=1;j<=Nb;j=j+1)
     {    //print("j=");print(j);
          f1=c1*(x(b[j][1]))^2+c2*x(b[j][2])*x(b[j][3]);
          f2=c3*(x(b[j][2]))^3+c4*(x(b[j][3]))^3+c5*(x(b[j][4]))^3;
          f3=c6*x(b[j][5])+c7*x(b[j][6]);
          f=f1,f2,f3;
          P=PolyAlgCycle(F,f,n);
          AS0=AS0,P[1];  
     }
}
AS0=AS0+0; // quit AS0[1]=0;
intvec Ind;
//Ind=1,2,4,5,7,8,10,11,13,14,16,17,19,20,22,23,25,26,28,29,31,32,34,35,37,38,40,41,43,44,46,47,49,50,52,53,55,56,58,59,61,62,64,65,67,68,70,71,73,74,76,77,79,80,82,83,85,86,88,89,91,92,94,95,97,98,100,101,103,104,106,107,109,110,112,113,115,116,118,119,121,122,124,125,127,128,130,131,133,134,136,137,139,140,142,143,145,146,148,149,151,152,154,155,157,158,160,161,163,164,166,167,169,170,172,173,175,176,178,179,181,182,184,185,187,188,190,191,193,194,196,197,199,200,202,203,205,206,208,209,212,215,217,218,220,221,223,224,226,227,229,230,232,233,235,236,238,239,241,242,244,245,247,248,250,251,253,254,256,257,259,260,262,263,265,266,268,269,272,275,278,281,284,289,290,292,293,295,296,298,299,301,302,304,305,307,308,310,311,313,314,316,317,319,320,322,323,325,326,328,329,332,335,338,341,344,361,362,364,365,367,368,370,371,373,374,376,377,379,380,382,383,385,386,388,389,391,392,394,395,397,398,400,401,403,404,406,407,409,410,412,413,415,416,418,419,421,422,424,425,427,428,430,431,433,434,436,437,439,440,442,443,445,446,448,449,451,452,454,455,457,458,460,461,463,464,466,467,469,470,472,473,475,476,478,481,482,484,485,487,488,490,491,493,494,496,497,499,500,502,505,506,508,509,511,512,514,515,517,518,520,521,523,524,526,527,529,530,532,535,536,541,542,544,545,547,548,550,551,553,554,556,557,559,560,562,565,566,568,572,577,578,580,581,583,584,586,587,589,590,592,601,602,604,605,607,608,610,611,613,614,616,617,619,620,622,625,626,628,632,638,649,650,652,661,662,664,665,667,668,670,671,673,674,676,677,679,680,682,685,686,688,692,698,1081,1084,1087,1090,1093,1096,1099,1102,1105,1108,1111,1114,1117,1120,1123,1126,1129,1132,1135,1138,1141,1144,1147,1150,1153,1156,1159,1162,1165,1168,1171,1174,1177,1180,1183,1186,1189,1192,1195,1198,1201,1204,1207,1210,1213,1216,1225,1228,1231,1234,1237,1240,1243,1246,1249,1252,1255,1258,1261,1264,1267,1270,1273,1276,1285,1297,1300,1303,1306,1309,1312,1315,1318,1321,1324,1327,1330,1333,1336,1345,1357,1369,1372,1375,1378,1381,1384,1387,1390,1393,1396,1405,1417,1429,1441,1444,1447,1450,1453,1456,1459,1462,1465,1468,1471,1474,1477,1480,1483,1486,1489,1492,1495,1498,1501,1504,1507,1510,1513,1516,1519,1522,1525,1528,1531,1534,1537,1540,1543,1546,1549,1552,1555,1558,1561,1564,1567,1570,1573,1576,1585,1588,1591,1594,1597,1600,1603,1606,1609,1612,1615,1618,1621,1624,1627,1630,1633,1636,1645,1657,1660,1663,1666,1669,1672,1675,1678,1681,1684,1687,1690,1693,1696,1705,1717,1729,1732,1735,1738,1741,1744,1747,1750,1753,1756,1765,1777,1789,2161,2162,2164,2165,2167,2168,2170,2171,2173,2174,2176,2177,2179,2180,2182,2185,2186,2188,2192,2198,2221,2222,2224,2225,2228,2233,2234,2236,2237,2239,2240,2242,2245,2246,2248,2252,2258,2281,2282,2284,2285,2288,2305,2306,2308,2312,2318,2341,2342,2348,2378,2402,2521,2522,2524,2525,2527,2528,2530,2531,2533,2534,2536,2537,2539,2540,2542,2545,2546,2548,2552,2558,2581,2582,2584,2593,2594,2596,2597,2599,2600,2602,2605,2608,2612,2641,2642,2644,2665,2668,2672,2701,2702,2762,3241,3244,3247,3250,3253,3256,3265,3277,3289,3301,3313,3316,3361,3421,3481,3541,3601,3604,3607,3610,3613,3616,3625,3637,3649,3661,3673,3676,3721,3781,3841,3901,5401,5761;

Ind=1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1294,1295,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1354,1355,1357,1358,1360,1361,1363,1364,1366,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1414,1415,1417,1418,1420,1421,1423,1424,1426,1429,1432,1435,1438,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1582,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1606,1607,1608,1609,1610,1611,1612,1614,1615,1616,1618,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1642,1645,1646,1647,1648,1652,1657,1658,1660,1661,1663,1664,1666,1667,1668,1669,1670,1672,1675,1678,1681,1682,1683,1684,1685,1686,1687,1688,1690,1691,1692,1693,1694,1696,1697,1698,1700,1702,1705,1706,1712,1717,1718,1729,1732,1735,1738,1741,1742,1743,1744,1745,1746,1747,1748,1750,1753,1756,1757,1758,1760,1765,1772,1777,1789,2161,2162,2164,2165,2167,2168,2170,2171,2173,2174,2176,2177,2179,2180,2182,2185,2186,2188,2192,2198,2221,2222,2224,2225,2228,2233,2234,2236,2237,2239,2240,2242,2245,2246,2248,2252,2258,2281,2282,2284,2285,2288,2305,2306,2308,2312,2318,2341,2342,2348,2378,2402,2521,2522,2524,2525,2527,2528,2530,2531,2533,2534,2536,2537,2539,2540,2542,2545,2546,2548,2552,2558,2581,2582,2584,2593,2594,2596,2597,2599,2600,2602,2605,2608,2612,2641,2642,2644,2665,2668,2672,2701,2702,2762,3241,3244,3247,3250,3253,3256,3265,3277,3289,3301,3313,3316,3361,3421,3481,3541,3601,3604,3607,3610,3613,3616,3625,3637,3649,3661,3673,3676,3721,3781,3841,3901,5401,5761;
ideal AS; // The ideal of the linear independent AS cycles
for (i=1; i<=size(Ind); i=i+1)
{
     AS[i]=AS0[Ind[i]];
}


write(":w /home/daniel/ASconstruction/ASbig",AS);
intvec df;
for (i=1;i<=size(AS);i=i+1){df[i]=0;};
size(AS);
matrix IM1[size(AS)][size(AS)]=IntersecMatrix (F,AS, AS, n, df,df);
write(":w /home/daniel/ASconstruction/IMASbig",IM1);

export(AS);
//export(MAS);
return(R);
}
example
{"EXAMPLE:"; echo=2; 
     def RAS=ASAlgCycles();
     setring RAS;
     write("ssi:w AS.ssi",AS);
     ideal IAS=minbase(AS);
     write("ssi:w IAS.ssi",IAS);
     size(IAS);    
}
//---------------------------------------------------------------------------
proc T3AlgCycles ()
"USAGE:
     T3AlgCycles ()
PURPOSE: 
     Compute the polynomials associated to all type 3 cycles in the Fermat variety (d=6, n=2)
     {x_0^6+x_1^6+...+x_(2n+1)^6=0}
RETURN:
     The ring where the polynomials are defined.
     The ideal It3 of cycles type 3. 
SEE ALSO:
     LinAlgCycles, ASAlgCycles
EXAMPLE: 
     example T3AlgCycles; shows an example
"
{
int n=2; int d=6;
//0) Fristly, we define a ring with the z:=x+y as parameter, where
// x=2^(1/3), y= e^(2ipi/12)

int i; int j; int k;
ring R3=(0,z),(x(0..2*n+1)),dp;
minpoly=z^12-3*z^10-8*z^9+6*z^8+17*z^6+84*z^5+42*z^4-76*z^3+129*z^2-60*z+25;
poly x=-53456/17655*z+1645/642*z^2-19964/3531*z^3-21399/2354*z^4-63812/17655*z^5-5677/7062*z^6-2342/17655*z^7+8463/11770*z^8+7966/17655*z^9+7/330*z^10-1526/17655*z^11-273/11770*z^12;
poly ys3=518/165*z+8827/1650*z^2-2344/825*z^3+5616/275*z^4+1196/75*z^5+5521/1650*z^6+122/165*z^7-12/25*z^8-1457/825*z^9-709/1650*z^10+26/165*z^11+43/275*z^12;
poly yi=28932/5885*z-616413/58850*z^2+416336/29425*z^3-65937/29425*z^4-256524/29425*z^5-102299/58850*z^6-558/1177*z^7-28191/29425*z^8+25413/29425*z^9+213/550*z^10+18/1177*z^11-3236/29425*z^12; // This is equal to srqt(-1)

poly y=1/2*ys3+1/2*yi;
poly y2=1/2+ys3*yi/2; // Powers of; in order to do faster the alforithm
poly y4=-1/2+ys3*yi/2;
poly y6=-1;
poly y8=-1/2-1/2*ys3*yi;
poly y10=1/2-1/2*ys3*yi;


poly F; //Fermat variety
for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

int N=2*n;

//1) Define all posible tuples a=(a1,...,a2n+1)
int Na=d^(N+1);

// 2) Define the permutation
list b=PermT3(n);
int Nb=size(b);

// 3) Matrix with of polynomials associated 
// In the rows we change the a
// In the columns we change the b
ideal f;
intvec a; intvec a0;
matrix IM1; matrix IM2; intvec df=12;
ideal It3; ideal It3_with_linear; ideal It3aux;
list P; 
poly f1; poly f2; poly f3;
poly g1; poly g2; poly g3;
poly c1; poly c2; poly c3; poly c4; poly c5; poly c6; poly c7; poly c8;
poly Q; poly Q1; poly Q2;
list FP;
intvec Ind=0,1,2,3,4,5,217,219,221;
for (i=1;i<=9;i=i+1)
{    print("i="); print(Ind[i]);
     a0=KtoVec (Ind[i],N,d); 
     a=0,a0;
     c1=y4^(a[1]); c2=-x*y2^(a[2])*y2^(a[3]);
     c3=y4^(a[4]); c4=-x*y2^(a[5])*y2^(a[6]);
     c5=y6^(a[2]);  c6=y6^(a[3]); c7=yi*y6^(a[5]); c8=yi*y6^(a[6]);
     for (j=1;j<=Nb;j=j+1)
     {
          //print("j=");  print(j);
          f1=c1*(x(b[j][1]))^2+c2*x(b[j][2])*x(b[j][3]);
          f2=c3*(x(b[j][4]))^2+c4*(x(b[j][5]))*(x(b[j][6]));
          f3=c5*x(b[j][2])^3+c6*x(b[j][3])^3+c7*x(b[j][5])^3+c8*x(b[j][6])^3;
          f=f1,f2,f3;
          P=PolyAlgCycle(F,f,n); FP=factorize(P[1]);
          //// We choose the type 3 ////
          Q=1; Q1=1; Q2=0;
          for (k=1;k<=size(FP[1]);k=k+1)
          {
               if (deg(FP[1][k])==2){Q1=Q1*FP[1][k];}
               else {Q=Q*FP[1][k];}
          }
          for (k=1;k<=size(Q1);k=k+1)
          {
               if(size(variables(Q1[k]))==2 or size(variables(Q1[k]))==4){Q2=Q2+Q1[k];}
          }
          Q=Q*Q2;
          It3=It3,Q;
          //////////////////////////////
          It3_with_linear=It3_with_linear,P[1];
     }
}
ideal I3; ideal I3L;
intvec indt3=2,3,5,14,15,17,26,27,39,182,183,184,185,194,195,196,197,206,207,208,218,219,230,542,554,566,578,590,1082,1262; // The li
for (i=1;i<=30;i=i+1)
{
     I3[i]=It3[indt3[i]];
     I3L[i]=It3_with_linear[indt3[i]];
}

export(I3);
return(R3);
}
example
{"EXAMPLE:"; echo=2; 
     def R3=T3AlgCycles();
     setring R3;
     ideal IT3=minbase(I3);
     size(I3);    
}
//---------------------------------------------------------------------------
proc Periods64 (intvec Coeff, intvec Ind, list L)
"USAGE:
     Periods64 ()
PURPOSE: 
     Compute the peridos for the combination given by Ind: Index of the algebraic cycles.
     and Coeff: Coefficients associated to these cycles. The list L=MonomialsDegree_d(5,6);
RETURN:
     The ring where the polynomials are defined.
     The period matrix P64.
SEE ALSO:
     LinAlgCycles, ASAlgCycles
EXAMPLE: 
     example P64; shows an example
"
{
int n=2; int d=6;
//0) Fristly, we define a ring with the z:=x+y as parameter, where
// x=2^(1/2), y= e^(2ipi/12)

int i; int jj; int k;
ring R = (complex,30,j),(x(0..2*n+1)),dp;
number z=2.12594645367931181153093377803116453404165409160669829410987860+0.5*j;

poly F; //Fermat variety
for (i=0; i<=2*n+1;i=i+1) {F=F+x(i)^d;}

///// We load the ideal of linear, AS and t3 cycles.
string s=read("Icl");            ///////////Warning modoify
execute("ideal Icl="+s+";");
string s=read("IAS");            ///////////Warning modoify
execute("ideal IAS="+s+";");
string s=read("It3");            ///////////Warning modoify
execute("ideal It3="+s+";");
////////////////////////////
ideal I=Icl,IAS,It3;

// List of monomials of degree 6 in variables x(0),...x(5)
poly P;
for (i=1;i<=size(Coeff);i=i+1)
{
     P=P+Coeff[i]*I[Ind[i]];
}

matrix P64[size(L)][size(L)];
for (i=1;i<=size(L);i=i+1)
{    print("i="); print(i);
     for (jj=1; jj<=size(L);jj=jj+1)
     {
          P64[i,jj]=P/(monomial(L[i])*monomial(L[jj]));
     }
}
write(":w P64",P64);
export(P64);
return(R);
}
example
{"EXAMPLE:"; echo=2; 
   
}
//---------------------------------------------------------------------------
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

//References
// [1] Periods of Complete Intersection Algebraic Cycles, R. Villaflor
// [2] Integral Hodge conjecture for Fermat varieties, E. Aljovin, H. Movasati, R. Villaflor
// [3] Aoki-Shioda article 
